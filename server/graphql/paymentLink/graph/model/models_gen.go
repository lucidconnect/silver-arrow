// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type BillingHistory struct {
	Date        time.Time `json:"date"`
	Amount      float64   `json:"amount"`
	ExplorerURL string    `json:"explorerUrl"`
}

type PaymentIntent struct {
	Type              PaymentType `json:"type"`
	Email             *string     `json:"email,omitempty"`
	Chain             int         `json:"chain"`
	Token             string      `json:"token"`
	Amount            float64     `json:"amount"`
	CheckoutSessionID *string     `json:"checkoutSessionId,omitempty"`
	ProductID         string      `json:"productId"`
	PriceID           string      `json:"priceId"`
	OwnerAddress      string      `json:"ownerAddress"`
	WalletAddress     string      `json:"walletAddress"`
	FirstChargeNow    bool        `json:"firstChargeNow"`
}

type PaymentLinkDetails struct {
	ID           string  `json:"id"`
	Mode         string  `json:"mode"`
	ProductID    string  `json:"productId"`
	ProductName  string  `json:"productName"`
	IntervalUnit string  `json:"intervalUnit"`
	Interval     int     `json:"interval"`
	MerchantID   string  `json:"merchantId"`
	MerchantName string  `json:"merchantName"`
	CallbackURL  string  `json:"callbackUrl"`
	Amount       float64 `json:"amount"`
	Token        string  `json:"token"`
	Chain        int     `json:"chain"`
}

type RequestValidation struct {
	Chain         int    `json:"chain"`
	UserOpHash    string `json:"userOpHash"`
	SignedMessage string `json:"signedMessage"`
}

type TransactionData struct {
	ID                  *string     `json:"id,omitempty"`
	Type                PaymentType `json:"type"`
	Chain               int         `json:"chain"`
	Token               string      `json:"token"`
	Amount              int         `json:"amount"`
	Interval            int         `json:"interval"`
	Reference           string      `json:"reference"`
	ProductID           string      `json:"productId"`
	WalletAddress       string      `json:"walletAddress"`
	SubscriptionKey     string      `json:"subscriptionKey"`
	CreatedAt           string      `json:"createdAt"`
	TransactionHash     string      `json:"transactionHash"`
	TransactionExplorer string      `json:"transactionExplorer"`
}

type PaymentType string

const (
	PaymentTypeSingle    PaymentType = "single"
	PaymentTypeRecurring PaymentType = "recurring"
)

var AllPaymentType = []PaymentType{
	PaymentTypeSingle,
	PaymentTypeRecurring,
}

func (e PaymentType) IsValid() bool {
	switch e {
	case PaymentTypeSingle, PaymentTypeRecurring:
		return true
	}
	return false
}

func (e PaymentType) String() string {
	return string(e)
}

func (e *PaymentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentType", str)
	}
	return nil
}

func (e PaymentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
