# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Query {
  fetchOneProduct(id: String!): Product!
  fetchProducts(owner: String!): [Product!]!
  fetchMerchantKey(input: MerchantAccessKeyQuery!): String!
  fetchMerchantStats(owner: String!): MerchantStats!
  getPaymentLink(id: String!): PaymentLinkDetails!
  getMerchantPaymentLinks(merchantId: String!): [PaymentLinkDetails!]!
}

type Mutation {
  addProduct(input: NewProduct!): Product!
  updateProduct(input: ProductUpdate!): Product!
  createAccessKey(input: NewMerchantKey!): MerchantAccessKey!
  createMerchant(input: NewMerchant!): Merchant!
  updateMerchantwebHookUrl(webhookUrl: String!): Merchant!
  toggleProductMode(input: ProductModeUpdate!): Mode!
  createPaymentLink(input: NewPaymentLink!): String!
  deletePaymentLink(id: String!): String!
}

input NewMerchant {
  name: String!
  email: String!
  owner: String!
    "This would be the url where payment status event would be delivered to"
  webHookUrl: String
}

input NewMerchantKey {
  merchantAddress: String!
  mode: Mode!
}

input MerchantAccessKeyQuery {
  mode: Mode!
  merchantAddress: String!
}

type Merchant {
  id: ID!
  name: String!
  email: String!
  publicKey: String!
  webHookUrl: String!
  accessKey: MerchantAccessKey!
}

input NewProduct {
  name: String!
  owner: String!
  chain: Int!
  token: String!
  amount: Float!
  interval: Int!
  paymentType: PaymentType!
  instantCharge: Boolean!
  receivingAddress: String!
  firstChargeNow: Boolean!
}

input NewPaymentLink {
  productId: String!
  callbackUrl: String!
}

type PaymentLinkDetails {
  id: ID!
  mode: String!
  productId: ID!
  productName: String!
  interval: Int!
  merchantId: ID!
  merchantName: String!
  callbackUrl: String!
  amount: Float!
  token: String!
  chain: Int!
}

input ProductUpdate {
  name: String
  receivingAddress: String
}

input ProductModeUpdate {
  productId: String!
  mode: Mode!
}

input MerchantUpdate {
  merchantId: String!
  name: String
  email: String
  isActive: Boolean
  webHookUrl: String
}

type Sub {
  chain: Int! 
  token: String!
  amount: Int!
  active: Boolean!
  interval: String!
  walletAddress: String!
}

type Product {
  name: String!
  mode: Mode!
  owner: String!
  chain: Int!
  token: String!
  productId: String!
  merchantId: String!
  receivingAddress: String!
  subscriptions: [Sub!]
  createdAt: String
}

type MerchantAccessKey {
  mode: Mode!
  publicKey: String!
  privateKey: String!
}

type MerchantStats {
  users: Int!
  products: Int!
  subscriptions: Int!
}

enum Mode {
  test
  live
}


enum PaymentType {
  single
  recurring
}

scalar Time