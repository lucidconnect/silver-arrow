package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/helicarrierstudio/silver-arrow/graphql/merchant/graph/generated"
	"github.com/helicarrierstudio/silver-arrow/graphql/merchant/graph/model"
	"github.com/helicarrierstudio/silver-arrow/merchant"
)

// AddMerchant is the resolver for the addMerchant field.
func (r *mutationResolver) AddMerchant(ctx context.Context, input model.NewMerchant) (*model.Merchant, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.CreateMerchant(input)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, input model.MerchantUpdate) (*model.Merchant, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// FetchOneMerchant is the resolver for the fetchOneMerchant field.
func (r *queryResolver) FetchOneMerchant(ctx context.Context, id string) (*model.Merchant, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.FetchMerchant(id)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// FetchMerchants is the resolver for the fetchMerchants field.
func (r *queryResolver) FetchMerchants(ctx context.Context, owner string) ([]*model.Merchant, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.FetchMerchantsByOwner(owner)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
