package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"

	"github.com/lucidconnect/silver-arrow/gqlerror"
	"github.com/lucidconnect/silver-arrow/graphql/merchant/graph/generated"
	"github.com/lucidconnect/silver-arrow/graphql/merchant/graph/model"
	"github.com/lucidconnect/silver-arrow/service/merchant"
)

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	merchantService := merchant.NewMerchantService(r.Database)

	merchant, err := getAuthenticatedAndActiveMerchant(ctx)
	if err != nil {
		return nil, err
	}
	if merchant == nil {
		return nil, errors.New("merchant does not exist")
	}
	result, err := merchantService.CreateProduct(input)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.ProductUpdate) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// CreateAccessKey is the resolver for the createAccessKey field.
func (r *mutationResolver) CreateAccessKey(ctx context.Context, owner string) (*model.AccessKey, error) {
	merchantService := merchant.NewMerchantService(r.Database)

	merchant, err := getAuthenticatedAndActiveMerchant(ctx)
	if err != nil {
		return nil, err
	}
	if merchant == nil {
		return nil, errors.New("merchant does not exist")
	}

	accessKeys, err := merchantService.CreateAccessKeys(merchant.OwnerAddress)
	if err != nil {
		return nil, err
	}
	return accessKeys, nil
}

// CreateMerchant is the resolver for the createMerchant field.
func (r *mutationResolver) CreateMerchant(ctx context.Context, input model.NewMerchant) (*model.Merchant, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.CreateMerchant(input)
	if err != nil {
		return nil, gqlerror.ErrToGraphQLError(gqlerror.InternalError, err.Error(), ctx)
	}
	return result, nil
}

// UpdateMerchantwebHookURL is the resolver for the updateMerchantwebHookUrl field.
func (r *mutationResolver) UpdateMerchantwebHookURL(ctx context.Context, webhookURL string) (*model.Merchant, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	merchant, err := getAuthenticatedAndActiveMerchant(ctx)
	if err != nil {
		return nil, err
	}

	result, err := merchantService.UpdateMerchantWebhook(*merchant, webhookURL)
	if err != nil {
		return nil, gqlerror.ErrToGraphQLError(gqlerror.InternalError, err.Error(), ctx)
	}
	return result, nil
}

// FetchOneProduct is the resolver for the fetchOneProduct field.
func (r *queryResolver) FetchOneProduct(ctx context.Context, id string) (*model.Product, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.FetchProduct(id)
	if err != nil {
		return result, nil
	}
	return result, nil
}

// FetchProducts is the resolver for the fetchProducts field.
func (r *queryResolver) FetchProducts(ctx context.Context, owner string) ([]*model.Product, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.FetchProductsByOwner(owner)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// FetchMerchantKey is the resolver for the fetchMerchantKey field.
func (r *queryResolver) FetchMerchantKey(ctx context.Context, owner string) (string, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	result, err := merchantService.FetchMerchantKey(owner)
	if err != nil {
		return "", err
	}
	return result, nil
}

// FetchMerchantStats is the resolver for the fetchMerchantStats field.
func (r *queryResolver) FetchMerchantStats(ctx context.Context, owner string) (*model.MerchantStats, error) {
	merchantService := merchant.NewMerchantService(r.Database)
	stats, err := merchantService.SummarizeMerchant(owner)
	if err != nil {
		return nil, err
	}
	return stats, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) UpdateMerchantDetails(ctx context.Context, input model.MerchantUpdate) (*model.Merchant, error) {

	return nil, gqlerror.ErrToGraphQLError(gqlerror.InternalError, "err.Error()", ctx)

}
